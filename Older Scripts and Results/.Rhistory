filter(SampleID == All.IDs[j]) %>%
select(Temperature, dCp)
### get a baseline-subtracted and interpolated final result!
auto.output <- auto.baseline(x = working.sample,w=30,exclusion.lwr = 48,exclusion.upr = 82, grid.temp = grid.temp, point = "innermost")
endpoints <- moving.window(x=working.sample, w=30,exclusion.lwr = 48,exclusion.upr = 82, point.selection = "innermost")
endpoints.inner.48 <- endpoints.inner.48 %>% rbind(data.frame(SampleID = All.IDs[j], lower = endpoints[1], upper = endpoints[2]))
Plasma.Final.Data.Inner <- Plasma.Final.Data.Inner %>% cbind(out = auto.output$dCp)
cat("\014")
}
endpoints.inner.48
grid.temp <- seq(45, 90, 0.1)
### Setup frame to store all data generated
Plasma.Final.Data.Inner <- data.frame(Temperature = grid.temp)
endpoints.inner.48 <- data.frame()
### loop over all samples and store the dCp with chosen temperature grid
for(j in 1:n.samples)
{
cat('Working on Sample ', All.IDs[j], 'element ', j,' of', n.samples,' \n')
### select a sample
working.sample <- final.plasma %>%
filter(SampleID == All.IDs[j]) %>%
select(Temperature, dCp)
### get a baseline-subtracted and interpolated final result!
auto.output <- auto.baseline(x = working.sample,w=30,exclusion.lwr = 48,exclusion.upr = 82, grid.temp = grid.temp, point = "innermost")
endpoints <- moving.window(x=working.sample, w=30,exclusion.lwr = 48,exclusion.upr = 82, point.selection = "innermost")
endpoints.inner.48 <- endpoints.inner.48 %>% rbind(data.frame(SampleID = All.IDs[j], lower = endpoints[1], upper = endpoints[2]))
Plasma.Final.Data.Inner <- Plasma.Final.Data.Inner %>% cbind(out = auto.output$dCp)
cat("\014")
}
colnames(Plasma.Final.Data.Inner)[-1] <- All.IDs
thing.inner <- Plasma.Final.Data.Inner %>% pivot_longer(names_to="SampleID", values_to = "dCp", 2:73)
thing.inner <- thing.inner %>% mutate(SampleNumber = str_extract(SampleID, '\\d+'), SampleIteration = str_extract(SampleID, '\\D$'))
numbers <- thing.inner %>% pull(SampleNumber) %>% unique()
other.thing <- Plasma.Working.Corrected %>% filter(between(Temperature, 45, 90))
pdf('generated_output/Plasma_Interpolated_48_82.pdf')
{
g<-NULL
for(i in 1:length(numbers)){
sample1 <- thing.inner %>% filter(SampleNumber == numbers[i]) %>% mutate(method = str_c("Auto",SampleIteration,sep=" ")) %>% mutate(type = "Auto")
sample2 <- other.thing %>% filter(SampleNumber == numbers[i]) %>% mutate(method = str_c("Tech",SampleIteration,sep=" ")) %>% mutate(type = "Not Auto")
combinded <- sample1 %>% rbind(sample2)
g[[i]]<- ggplot(combinded, aes(Temperature, dCp, color = method, linetype = type))+
geom_line()+
scale_color_manual(breaks = c("Auto a", "Auto b", "Tech a", "Tech b"),
values=c("green1", "red1", "green4", "red4"))+
labs(title = paste0('Final Automated Sample for ', str_sub(numbers[i], 1)))+
theme(legend.position = "top",
legend.key.height = unit(0.10, 'cm'),
legend.key.width = unit(0.30, 'cm'),
legend.box.spacing = unit(0.20, 'cm'),
legend.margin = margin(1, 1, 1, 1),
legend.title = element_text(size=5),
legend.text=element_text(size=5),
title = element_text(size = 8))
}
marrangeGrob(g,nrow=4,ncol=2)
}
dev.off()
write.csv(x=endpoints.inner.48, file = 'generated_output/Plasma_Endpoints_48_82.csv')
View(Plasma.Final.Data.Inner)
write.csv(x=Plasma.Final.Data.Inner, file = 'generated_output/Plasma_Intepolated_48_82.csv')
ggplot(Plasma.Final.Data.Inner, aes(x=Temperature, y = C99601a))+geom_line()
library(dplyr)
urine_data <- readxl::read_excel("data_raw/Urine samples thermograms raw 4.23.2023 corrected",
sheet = "Data")
Check.na.cols <- Urine_Raw_Corrected %>% slice(1) %>% is.na() %>% which()
colnames(Urine_Raw_Corrected)[Check.na.cols]
Urine_Raw_Corrected_Full <- Urine_Raw_Corrected %>% select(-all_of(Check.na.cols))
Urine.Working <- NULL
Total.Samples <- ncol(Urine_Raw_Corrected_Full)/2
for(j in 1:Total.Samples)
{
lwr <- 2*j - 1
upr <- 2*j
if(j %% 20 == 0) cat(j, ' of ', Total.Samples, 'completed. \n')
temp.col <- Urine_Raw_Corrected_Full %>% select(lwr:upr)
temp.col <- temp.col %>% mutate(SampleID = colnames(temp.col)[2])
colnames(temp.col)[1:2] <- c('Temperature', 'dCp')
Urine.Working <- Urine.Working %>% rbind(temp.col)
}
### Create variables for patient identification and tracking
### Remove all NA rows (non-aligned temperatures)
Urine.Working <- Urine.Working %>%
filter(!is.na(Temperature)) %>%
mutate(SampleNumber = factor(str_extract(SampleID, '\\d+')),
SampleIteration = factor(str_extract(SampleID, '[a-f]'))) %>%
mutate(SampleID = factor(SampleID)) %>%
relocate(SampleID)
library(dplyr)
Urine_Raw_Corrected <- readxl::read_excel("data_raw/Urine samples thermograms raw 4.23.2023 corrected",
sheet = "Data")
Check.na.cols <- Urine_Raw_Corrected %>% slice(1) %>% is.na() %>% which()
colnames(Urine_Raw_Corrected)[Check.na.cols]
Urine_Raw_Corrected_Full <- Urine_Raw_Corrected %>% select(-all_of(Check.na.cols))
Urine.Working <- NULL
Total.Samples <- ncol(Urine_Raw_Corrected_Full)/2
for(j in 1:Total.Samples)
{
lwr <- 2*j - 1
upr <- 2*j
if(j %% 20 == 0) cat(j, ' of ', Total.Samples, 'completed. \n')
temp.col <- Urine_Raw_Corrected_Full %>% select(lwr:upr)
temp.col <- temp.col %>% mutate(SampleID = colnames(temp.col)[2])
colnames(temp.col)[1:2] <- c('Temperature', 'dCp')
Urine.Working <- Urine.Working %>% rbind(temp.col)
}
### Create variables for patient identification and tracking
### Remove all NA rows (non-aligned temperatures)
Urine.Working <- Urine.Working %>%
filter(!is.na(Temperature)) %>%
mutate(SampleNumber = factor(str_extract(SampleID, '\\d+')),
SampleIteration = factor(str_extract(SampleID, '[a-f]'))) %>%
mutate(SampleID = factor(SampleID)) %>%
relocate(SampleID)
library(dplyr)
Urine_Raw_Corrected <- readxl::read_excel("data_raw/Urine samples thermograms raw 4.23.2023 corrected",
sheet = "Data")
Urine_Raw_Corrected <- readxl::read_excel("data_raw/Urine samples thermograms raw 4.23.2023 corrected.xlsx",
sheet = "Data")
Check.na.cols <- Urine_Raw_Corrected %>% slice(1) %>% is.na() %>% which()
colnames(Urine_Raw_Corrected)[Check.na.cols]
Urine_Raw_Corrected_Full <- Urine_Raw_Corrected %>% select(-all_of(Check.na.cols))
Urine.Working <- NULL
Total.Samples <- ncol(Urine_Raw_Corrected_Full)/2
for(j in 1:Total.Samples)
{
lwr <- 2*j - 1
upr <- 2*j
if(j %% 20 == 0) cat(j, ' of ', Total.Samples, 'completed. \n')
temp.col <- Urine_Raw_Corrected_Full %>% select(lwr:upr)
temp.col <- temp.col %>% mutate(SampleID = colnames(temp.col)[2])
colnames(temp.col)[1:2] <- c('Temperature', 'dCp')
Urine.Working <- Urine.Working %>% rbind(temp.col)
}
### Create variables for patient identification and tracking
### Remove all NA rows (non-aligned temperatures)
Urine.Working <- Urine.Working %>%
filter(!is.na(Temperature)) %>%
mutate(SampleNumber = factor(str_extract(SampleID, '\\d+')),
SampleIteration = factor(str_extract(SampleID, '[a-f]'))) %>%
mutate(SampleID = factor(SampleID)) %>%
relocate(SampleID)
library(dplyr)
library(tidyverse)
library(stringr)
Urine_Raw_Corrected <- readxl::read_excel("data_raw/Urine samples thermograms raw 4.23.2023 corrected.xlsx",
sheet = "Data")
Check.na.cols <- Urine_Raw_Corrected %>% slice(1) %>% is.na() %>% which()
colnames(Urine_Raw_Corrected)[Check.na.cols]
Urine_Raw_Corrected_Full <- Urine_Raw_Corrected %>% select(-all_of(Check.na.cols))
Urine.Working <- NULL
Total.Samples <- ncol(Urine_Raw_Corrected_Full)/2
for(j in 1:Total.Samples)
{
lwr <- 2*j - 1
upr <- 2*j
if(j %% 20 == 0) cat(j, ' of ', Total.Samples, 'completed. \n')
temp.col <- Urine_Raw_Corrected_Full %>% select(lwr:upr)
temp.col <- temp.col %>% mutate(SampleID = colnames(temp.col)[2])
colnames(temp.col)[1:2] <- c('Temperature', 'dCp')
Urine.Working <- Urine.Working %>% rbind(temp.col)
}
### Create variables for patient identification and tracking
### Remove all NA rows (non-aligned temperatures)
Urine.Working <- Urine.Working %>%
filter(!is.na(Temperature)) %>%
mutate(SampleNumber = factor(str_extract(SampleID, '\\d+')),
SampleIteration = factor(str_extract(SampleID, '[a-f]'))) %>%
mutate(SampleID = factor(SampleID)) %>%
relocate(SampleID)
View(Urine.Working)
rm(list = setdiff(ls(), c('Urine.Working')))
save.image('data/Urine_Working.RData')
load('data/Plasma_48-82.RData')
load('data/Plasma_Working.RData')
grid.temp <- seq(45, 90, 0.1)
### Setup frame to store all data generated
Plasma.Final.Data.Inner.48.81 <- data.frame(Temperature = grid.temp)
endpoints.inner.48.81 <- data.frame()
### loop over all samples and store the dCp with chosen temperature grid
for(j in 1:n.samples)
{
cat('Working on Sample ', All.IDs[j], 'element ', j,' of', n.samples,' \n')
### select a sample
working.sample <- final.plasma %>%
filter(SampleID == All.IDs[j]) %>%
select(Temperature, dCp)
### get a baseline-subtracted and interpolated final result!
auto.output <- auto.baseline(x = working.sample,w=30,exclusion.lwr = 48,exclusion.upr = 81, grid.temp = grid.temp, point = "innermost")
endpoints <- moving.window(x=working.sample, w=30,exclusion.lwr = 48,exclusion.upr = 81, point.selection = "innermost")
endpoints.inner.48.81 <- endpoints.inner.48.81 %>% rbind(data.frame(SampleID = All.IDs[j], lower = endpoints[1], upper = endpoints[2]))
Plasma.Final.Data.Inner.48.81 <- Plasma.Final.Data.Inner.48.81 %>% cbind(out = auto.output$dCp)
cat("\014")
}
#Changing Data
colnames(Plasma.Final.Data.Inner.48.81)[-1] <- All.IDs
thing.inner <- Plasma.Final.Data.Inner.48.81 %>% pivot_longer(names_to="SampleID", values_to = "dCp", 2:73)
thing.inner <- thing.inner %>% mutate(SampleNumber = str_extract(SampleID, '\\d+'), SampleIteration = str_extract(SampleID, '\\D$'))
numbers <- thing.inner %>% pull(SampleNumber) %>% unique()
other.thing <- Plasma.Working.Corrected %>% filter(between(Temperature, 45, 90))
#Graphs
pdf('generated_output/Plasma_Interpolated_48_81.pdf')
{
g<-NULL
for(i in 1:length(numbers)){
sample1 <- thing.inner %>% filter(SampleNumber == numbers[i]) %>% mutate(method = str_c("Auto",SampleIteration,sep=" ")) %>% mutate(type = "Auto")
sample2 <- other.thing %>% filter(SampleNumber == numbers[i]) %>% mutate(method = str_c("Tech",SampleIteration,sep=" ")) %>% mutate(type = "Not Auto")
combinded <- sample1 %>% rbind(sample2)
g[[i]]<- ggplot(combinded, aes(Temperature, dCp, color = method, linetype = type))+
geom_line()+
scale_color_manual(breaks = c("Auto a", "Auto b", "Tech a", "Tech b"),
values=c("green1", "red1", "green4", "red4"))+
labs(title = paste0('Final Automated Sample for ', str_sub(numbers[i], 1)))+
theme(legend.position = "top",
legend.key.height = unit(0.10, 'cm'),
legend.key.width = unit(0.30, 'cm'),
legend.box.spacing = unit(0.20, 'cm'),
legend.margin = margin(1, 1, 1, 1),
legend.title = element_text(size=5),
legend.text=element_text(size=5),
title = element_text(size = 8))
}
marrangeGrob(g,nrow=4,ncol=2)
}
dev.off()
library(dplyr)
library(stringr)
grid.temp <- seq(45, 90, 0.1)
### Setup frame to store all data generated
Plasma.Final.Data.Inner.48.81 <- data.frame(Temperature = grid.temp)
endpoints.inner.48.81 <- data.frame()
### loop over all samples and store the dCp with chosen temperature grid
for(j in 1:n.samples)
{
cat('Working on Sample ', All.IDs[j], 'element ', j,' of', n.samples,' \n')
### select a sample
working.sample <- final.plasma %>%
filter(SampleID == All.IDs[j]) %>%
select(Temperature, dCp)
### get a baseline-subtracted and interpolated final result!
auto.output <- auto.baseline(x = working.sample,w=30,exclusion.lwr = 48,exclusion.upr = 81, grid.temp = grid.temp, point = "innermost")
endpoints <- moving.window(x=working.sample, w=30,exclusion.lwr = 48,exclusion.upr = 81, point.selection = "innermost")
endpoints.inner.48.81 <- endpoints.inner.48.81 %>% rbind(data.frame(SampleID = All.IDs[j], lower = endpoints[1], upper = endpoints[2]))
Plasma.Final.Data.Inner.48.81 <- Plasma.Final.Data.Inner.48.81 %>% cbind(out = auto.output$dCp)
cat("\014")
}
#Changing Data
colnames(Plasma.Final.Data.Inner.48.81)[-1] <- All.IDs
thing.inner <- Plasma.Final.Data.Inner.48.81 %>% pivot_longer(names_to="SampleID", values_to = "dCp", 2:73)
thing.inner <- thing.inner %>% mutate(SampleNumber = str_extract(SampleID, '\\d+'), SampleIteration = str_extract(SampleID, '\\D$'))
numbers <- thing.inner %>% pull(SampleNumber) %>% unique()
other.thing <- Plasma.Working.Corrected %>% filter(between(Temperature, 45, 90))
#Graphs
pdf('generated_output/Plasma_Interpolated_48_81.pdf')
{
g<-NULL
for(i in 1:length(numbers)){
sample1 <- thing.inner %>% filter(SampleNumber == numbers[i]) %>% mutate(method = str_c("Auto",SampleIteration,sep=" ")) %>% mutate(type = "Auto")
sample2 <- other.thing %>% filter(SampleNumber == numbers[i]) %>% mutate(method = str_c("Tech",SampleIteration,sep=" ")) %>% mutate(type = "Not Auto")
combinded <- sample1 %>% rbind(sample2)
g[[i]]<- ggplot(combinded, aes(Temperature, dCp, color = method, linetype = type))+
geom_line()+
scale_color_manual(breaks = c("Auto a", "Auto b", "Tech a", "Tech b"),
values=c("green1", "red1", "green4", "red4"))+
labs(title = paste0('Final Automated Sample for ', str_sub(numbers[i], 1)))+
theme(legend.position = "top",
legend.key.height = unit(0.10, 'cm'),
legend.key.width = unit(0.30, 'cm'),
legend.box.spacing = unit(0.20, 'cm'),
legend.margin = margin(1, 1, 1, 1),
legend.title = element_text(size=5),
legend.text=element_text(size=5),
title = element_text(size = 8))
}
marrangeGrob(g,nrow=4,ncol=2)
}
dev.off()
?pivot_loner
library(dplyr)
library(stringr)
library(tidyverse)
library(knitr)
library(forecast)
library(gridExtra)
grid.temp <- seq(45, 90, 0.1)
### Setup frame to store all data generated
Plasma.Final.Data.Inner.48.81 <- data.frame(Temperature = grid.temp)
endpoints.inner.48.81 <- data.frame()
### loop over all samples and store the dCp with chosen temperature grid
for(j in 1:n.samples)
{
cat('Working on Sample ', All.IDs[j], 'element ', j,' of', n.samples,' \n')
### select a sample
working.sample <- final.plasma %>%
filter(SampleID == All.IDs[j]) %>%
select(Temperature, dCp)
### get a baseline-subtracted and interpolated final result!
auto.output <- auto.baseline(x = working.sample,w=30,exclusion.lwr = 48,exclusion.upr = 81, grid.temp = grid.temp, point = "innermost")
endpoints <- moving.window(x=working.sample, w=30,exclusion.lwr = 48,exclusion.upr = 81, point.selection = "innermost")
endpoints.inner.48.81 <- endpoints.inner.48.81 %>% rbind(data.frame(SampleID = All.IDs[j], lower = endpoints[1], upper = endpoints[2]))
Plasma.Final.Data.Inner.48.81 <- Plasma.Final.Data.Inner.48.81 %>% cbind(out = auto.output$dCp)
cat("\014")
}
#Changing Data
colnames(Plasma.Final.Data.Inner.48.81)[-1] <- All.IDs
thing.inner <- Plasma.Final.Data.Inner.48.81 %>% pivot_longer(names_to="SampleID", values_to = "dCp", 2:73)
thing.inner <- thing.inner %>% mutate(SampleNumber = str_extract(SampleID, '\\d+'), SampleIteration = str_extract(SampleID, '\\D$'))
numbers <- thing.inner %>% pull(SampleNumber) %>% unique()
other.thing <- Plasma.Working.Corrected %>% filter(between(Temperature, 45, 90))
#Graphs
pdf('generated_output/Plasma_Interpolated_48_81.pdf')
{
g<-NULL
for(i in 1:length(numbers)){
sample1 <- thing.inner %>% filter(SampleNumber == numbers[i]) %>% mutate(method = str_c("Auto",SampleIteration,sep=" ")) %>% mutate(type = "Auto")
sample2 <- other.thing %>% filter(SampleNumber == numbers[i]) %>% mutate(method = str_c("Tech",SampleIteration,sep=" ")) %>% mutate(type = "Not Auto")
combinded <- sample1 %>% rbind(sample2)
g[[i]]<- ggplot(combinded, aes(Temperature, dCp, color = method, linetype = type))+
geom_line()+
scale_color_manual(breaks = c("Auto a", "Auto b", "Tech a", "Tech b"),
values=c("green1", "red1", "green4", "red4"))+
labs(title = paste0('Final Automated Sample for ', str_sub(numbers[i], 1)))+
theme(legend.position = "top",
legend.key.height = unit(0.10, 'cm'),
legend.key.width = unit(0.30, 'cm'),
legend.box.spacing = unit(0.20, 'cm'),
legend.margin = margin(1, 1, 1, 1),
legend.title = element_text(size=5),
legend.text=element_text(size=5),
title = element_text(size = 8))
}
marrangeGrob(g,nrow=4,ncol=2)
}
dev.off()
write.csv(x=Plasma.Final.Data.Inner.48.81, file = 'generated_output/Plasma_Intepolated_48_81.csv')
write.csv(x=endpoints.inner.48.81, file = 'generated_output/Endpoints_48_81.csv')
save.image('data/Plasma_48-82.RData')
load('data/Plasma_Working.RData')
View(auto.baseline)
auto.baseline <- function(x, w = 90, exclusion.lwr = 60, exclusion.upr = 80,
grid.temp = seq(45, 90, 0.1), plot.on = FALSE,
point = "outmost")
{
### automate selection of endpoints
endpoints <- moving.window(
x = x,
w = w,
exclusion.lwr = exclusion.lwr,
exclusion.upr = exclusion.upr,
point.selection = point)
### baseline subtraction with auto-selected upr/lwr points
baseline.output <- baseline.subtraction.byhand(
x = working.sample,
lwr.temp = endpoints$lower,
upr.temp = endpoints$upper,
plot.on = plot.on)
### generate a final sample on chosen grid!
final.sample <- final.sample.interpolate(
x = baseline.output,
grid.temp = seq(45, 90, 0.1),
plot.on = plot.on)
### return the interpolated baseline-subtracted result
return(final.sample)
}
library(dplyr)
library(stringr)
library(tidyverse)
library(knitr)
library(forecast)
library(gridExtra)
grid.temp <- seq(45, 90, 0.1)
Plasma.Final.Data.Inner.48.81 <- data.frame(Temperature = grid.temp)
endpoints.inner.48.81 <- data.frame()
### loop over all samples and store the dCp with chosen temperature grid
for(j in 1:n.samples)
{
cat('Working on Sample ', All.IDs[j], 'element ', j,' of', n.samples,' \n')
### select a sample
working.sample <- final.plasma %>%
filter(SampleID == All.IDs[j]) %>%
select(Temperature, dCp)
### get a baseline-subtracted and interpolated final result!
auto.output <- auto.baseline(x = working.sample,w=30,exclusion.lwr = 48,exclusion.upr = 81, grid.temp = grid.temp, point = "innermost")
endpoints <- moving.window(x=working.sample, w=30,exclusion.lwr = 48,exclusion.upr = 81, point.selection = "innermost")
endpoints.inner.48.81 <- endpoints.inner.48.81 %>% rbind(data.frame(SampleID = All.IDs[j], lower = endpoints[1], upper = endpoints[2]))
Plasma.Final.Data.Inner.48.81 <- Plasma.Final.Data.Inner.48.81 %>% cbind(out = auto.output$dCp)
cat("\014")
}
#Changing Data
colnames(Plasma.Final.Data.Inner.48.81)[-1] <- All.IDs
thing.inner <- Plasma.Final.Data.Inner.48.81 %>% pivot_longer(names_to="SampleID", values_to = "dCp", 2:73)
thing.inner <- thing.inner %>% mutate(SampleNumber = str_extract(SampleID, '\\d+'), SampleIteration = str_extract(SampleID, '\\D$'))
numbers <- thing.inner %>% pull(SampleNumber) %>% unique()
other.thing <- Plasma.Working.Corrected %>% filter(between(Temperature, 45, 90))
#Graphs
pdf('generated_output/Plasma_Interpolated_48_81.pdf')
{
g<-NULL
for(i in 1:length(numbers)){
sample1 <- thing.inner %>% filter(SampleNumber == numbers[i]) %>% mutate(method = str_c("Auto",SampleIteration,sep=" ")) %>% mutate(type = "Auto")
sample2 <- other.thing %>% filter(SampleNumber == numbers[i]) %>% mutate(method = str_c("Tech",SampleIteration,sep=" ")) %>% mutate(type = "Not Auto")
combinded <- sample1 %>% rbind(sample2)
g[[i]]<- ggplot(combinded, aes(Temperature, dCp, color = method, linetype = type))+
geom_line()+
scale_color_manual(breaks = c("Auto a", "Auto b", "Tech a", "Tech b"),
values=c("green1", "red1", "green4", "red4"))+
labs(title = paste0('Final Automated Sample for ', str_sub(numbers[i], 1)))+
theme(legend.position = "top",
legend.key.height = unit(0.10, 'cm'),
legend.key.width = unit(0.30, 'cm'),
legend.box.spacing = unit(0.20, 'cm'),
legend.margin = margin(1, 1, 1, 1),
legend.title = element_text(size=5),
legend.text=element_text(size=5),
title = element_text(size = 8))
}
marrangeGrob(g,nrow=4,ncol=2)
}
dev.off()
write.csv(x=endpoints.inner.48.81, file = 'generated_output/Endpoints_48_81.csv')
write.csv(x=Plasma.Final.Data.Inner.48.81, file = 'generated_output/Plasma_Interpolated_48_81.csv')
auto.baseline <- function(x, w = 90, exclusion.lwr = 60, exclusion.upr = 80,
grid.temp = seq(45, 90, 0.1), plot.on = FALSE,
point = "outmost")
{
### automate selection of endpoints
endpoints <- moving.window(
x = x,
w = w,
exclusion.lwr = exclusion.lwr,
exclusion.upr = exclusion.upr,
point.selection = point)
### baseline subtraction with auto-selected upr/lwr points
baseline.output <- baseline.subtraction.byhand(
x = x,
lwr.temp = endpoints$lower,
upr.temp = endpoints$upper,
plot.on = plot.on)
### generate a final sample on chosen grid!
final.sample <- final.sample.interpolate(
x = baseline.output,
grid.temp = grid.temp,
plot.on = plot.on)
### return the interpolated baseline-subtracted result
return(final.sample)
}
save.image('data/Plasma_48-82.RData')
load('data/Plasma_48-82.RData')
View(auto.baseline)
write.csv(x=Plasma.Final.Data.Inner.48.81, file = 'generated_output/Plasma_Interpolated_48_81.csv')
write.csv(x=Plasma.Final.Data.Inner.48.81, file = 'generated_output/Plasma_Interpolated_48_81.csv')
save.image('data/Plasma_48-82.RData')
View(auto.baseline)
devtools::install_github("BuscagliaR/tlbparam")
library(tlbparam)
library(dplyr)
library(stringr)
inner <- read.csv("~/GitHub/Thermogram_Baseline_v2/generated_output/innermost_data.csv")
inner <- inner[-1]
inner <- inner %>% mutate(Temperature = str_c("T", Temperature, sep=""))
inner.t <- t(inner)
colnames(inner.t) <- inner.t[1,]
inner.t <- inner.t[-1,]
inner.t <- as.data.frame(inner.t)
inner.t <- inner.t %>% mutate(SampleCode = row.names(inner.t))
thing <- inner.t$SampleCode
inner.t$SampleCode <- thing
inner.t <- data.frame(lapply(inner.t[,1:451], function(x) as.numeric(as.character(x))))
inner.t$SampleCode <- thing
inner.t <- inner.t %>% select("SampleCode",everything())
urine_char <- clean_thermograms(inner.t, column = "SampleCode",summary = c('Width','Area','Max','TMax','TFM','Peak 1','Peak 2','Peak 3','TPeak 1','TPeak 2',
'TPeak 3','Peak 1 / Peak 2', 'Peak 1 / Peak 3', 'Peak 2 / Peak 3',
'Median', 'V1.2', 'TV1.2', 'V1.2 / Peak 1', 'V1.2 / Peak 2', 'V1.2 / Peak 3',
'Min', 'TMin', 'Peak F', 'TPeak F'))
data <- urine_char[,c(3,456:479)]
urine_classes <- readxl::read_excel("~/GitHub/Thermogram_Baseline_v2/data_raw/Lups urine classification 2.1.2024.xlsx", sheet = "Sheet1")
urine_classes <- urine_classes[,c(1,11)]
urine_classes$SampleNumber <- as.numeric(urine_classes$Sample)
data <- data %>% mutate(SampleNumber = as.numeric(str_extract(SampleCode, '\\d+')))
final_table <- left_join(urine_classes, data, by = "SampleNumber")
final_table <- final_table[!is.na(final_table$Disease),]
###ANOVA###
test <- aov(Area ~ Disease, data = final_table)
summary(test)
View(final_table)
test$coefficients
test
summary(test)
test$model
test$effects
test$terms
test$qr
test$contrasts
test$assign
test$residuals
test$terms
test$assign
summary(test)
summary(test[1])
summary(test[2])
summary(test[3])
summary(test[4])
summary(test[5])
summary(test[9])
View(test)
thing <- summary(test)
thing
thing[1]
thing[,1]
str(thing)
thing <- data.frame(summary(test))
thing <- as.data.frame(summary(test))
