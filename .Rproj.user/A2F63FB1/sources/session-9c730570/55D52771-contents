library(tidyverse)
library(knitr)
library(forecast)
library(ggplot2)
load('data/Urine_Working.RData')

multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)
  
  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)
  
  numPlots = length(plots)
  
  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                     ncol = cols, nrow = ceiling(numPlots/cols))
  }
  
  if (numPlots==1) {
    print(plots[[1]])
    
  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
    
    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}

first.twenty <- Urine.Working.Final #%>% filter(SampleID == All_Urine_ID[1:50])

pdf('generated_output/Urine_Raw_Data_Exponents.pdf')
{
for(i in 1:length(All_Urine_ID))
    {
    sample1 <- first.twenty %>% filter(SampleID == All_Urine_ID[i])
    g <- ggplot(data = sample1, aes(x = Temperature, y = dCp)) + geom_line() + labs(title = paste0('Exponentiated with Zero Replaced of Sample ', str_sub(All_Urine_ID[i], 1)))
    sample1 <- sample1 %>% mutate(dCp = exp(dCp))
    g2 <- ggplot(data = sample1, aes(x = Temperature, y = dCp)) + geom_line()
    print(multiplot(g,g2))
  }
}
dev.off()

pdf('generated_output/Urine_Raw_Data_Squared.pdf')
{
for(i in 1:50)
{
  sample1 <- first.twenty %>% filter(SampleID == All_Urine_ID[i])
  g <- ggplot(data = sample1, aes(x = Temperature, y = dCp)) + geom_line()
  sample1 <- sample1 %>% mutate(dCp = dCp^2)
  g2 <- ggplot(data = sample1, aes(x = Temperature, y = dCp)) + geom_line()
  print(multiplot(g,g2))
}
}
dev.off()