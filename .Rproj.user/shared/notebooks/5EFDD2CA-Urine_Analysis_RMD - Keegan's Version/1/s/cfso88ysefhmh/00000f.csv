"0","moving.window.2 <- function(x, w = 90, exclusion.lwr = 60, exclusion.upr = 80)"
"0","{"
"0","  ### fit a CV spline"
"0","  full.spline.fit <- smooth.spline(x$Temperature, x$dCp, cv=TRUE)"
"0","  ### spline residuals into a data.frame with ids for tracking."
"0","  r <- resid(full.spline.fit)"
"0","  r.df <- data.frame(Temperature = working.sample$Temperature, "
"0","                   r=r, "
"0","                   id = 1:length(working.sample$Temperature))"
"0","  ### scan through lower region calculating variance within a window size of w"
"0","  cat('Scanning Lower. \n')"
"0","  i=0"
"0","  df.var <- data.frame()"
"0","  ### how far do we need to scan?"
"0","  points.in.lower <- nrow(working.sample %>% filter(Temperature < exclude.lwr))"
"0","  ### scan and calculate variance for each window"
"0","  while ((w+i) < points.in.lower){"
"0","   rout <- r.df %>% slice((1+i):(w+i)) %>% summarise(temp.stop=(w+i),mean = mean(r), sd=sd(r))"
"0","   df.var <- rbind(df.var, rout)"
"0","   i=i+1"
"0","  }"
"0","  ### where was the minimum variance?"
"0","  low <- df.var %>% filter(sd == min(sd))"
"0","  lower <- working.sample$Temperature[low$temp.stop-(w/2)]"
"0","  "
"0","  ### total size of thermogram"
"0","  cat('Scanning Upper. \n')"
"0","  l <- length(working.sample$Temperature)"
"0","  j=0"
"0","  df.var.upper <- data.frame()"
"0","  ### how far from upper endpoint do we need to scan?"
"0","  smallest.point.in.upr <- nrow(working.sample) - nrow(working.sample %>% filter(Temperature > exclude.upr))"
"0","  ### scan from highest point to region of exclusion"
"0","  while ((l-w-j) > smallest.point.in.upr) {"
"0","    rout <- r.df %>% slice((l-w-j):(l-j)) %>% summarise(i=(l-w-j),mean = mean(r), sd=sd(r))"
"0","    df.var.upper <- rbind(df.var.upper, rout)"
"0","    j=j+1"
"0","  }"
"0","  ### where was the minimum variance?"
"0","  up <- df.var.upper %>% filter(sd == min(sd))"
"0","  upper <- working.sample$Temperature[up$i+(w/2)]"
"0","  "
"0","  if(is.na(lower[1]) == TRUE){"
"0","    lower <- 45"
"0","  }"
"0","  "
"0","  output <- data.frame(lower = lower, upper = upper)"
"0","  return(output)"
"0","}"
