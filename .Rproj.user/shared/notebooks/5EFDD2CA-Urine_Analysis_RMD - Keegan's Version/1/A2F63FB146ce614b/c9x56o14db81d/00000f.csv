"0","### baseline.subtraction.byhand"
"0","###"
"0","### @use"
"0","### Function for by-hand baseline subtraction"
"0","### This can be used to introduce some automation to the temperature choices"
"0","### but does provide a function in R for doing baseline subtraction!"
"0","###"
"0","### @requires"
"0","### dplyr"
"0","### cowplot"
"0","###"
"0","### @inputs"
"0","### x = data.frame that contains two columns: Temperature and dCp"
"0","### lwr.temp : lower cutoff temperature"
"0","### upr.temp : upper cutoff temperature"
"0","### plot.on : outputs a graphic of final sample + baseline procedure when TRUE"
"0","###"
"0","### @function"
"0","baseline.subtraction.byhand <- function(x, lwr.temp, upr.temp, plot.on = TRUE)"
"0","{"
"0","  ### check-conditions of boundaries - this effects automation"
"0","  if(lwr.temp < min(x$Temperature)+1) lwr.temp = lwr.temp + 1"
"0","  if(upr.temp > max(x$Temperature)-1) upr.temp = upr.temp - 1"
"0","  ### Extract the baseline regions"
"0","  work.lower <- x %>% filter(Temperature < lwr.temp)"
"0","  work.upper <- x %>% filter(Temperature > upr.temp)"
"0","  ### Splines for lower/upper regions"
"0","  spline.lower <- smooth.spline(work.lower$Temperature, work.lower$dCp, cv = TRUE)"
"0","  spline.upper <- smooth.spline(work.upper$Temperature, work.upper$dCp, cv = TRUE)"
"0","  ### Store data for graphing"
"0","  spline.lower.fit <- data.frame(Temperature = work.lower$Temperature, fit = spline.lower$y)"
"0","  spline.upper.fit <- data.frame(Temperature = work.upper$Temperature, fit = spline.upper$y)"
"0","  "
"0","  ### store middle (signal) region"
"0","  work.mid <- x %>% filter(between(Temperature, lwr.temp, upr.temp))"
"0","  ### find endpoints of splines"
"0","  spline.connect.points <- rbind("
"0","    spline.lower.fit %>% filter(Temperature == max(Temperature)),"
"0","    spline.upper.fit %>% filter(Temperature == min(Temperature)))"
"0","  ### connect endpoints and store"
"0","  spline.connect.lm <- lm(fit ~ Temperature, data = spline.connect.points)"
"0","  spline.connect.fit <- data.frame("
"0","    Temperature = work.mid$Temperature, "
"0","    fit = predict(spline.connect.lm, data.frame(Temperature = work.mid$Temperature)))"
"0","  "
"0","  ### store baseline as one unit"
"0","  working.baseline.final <- rbind(spline.lower.fit, spline.connect.fit, spline.upper.fit)"
"0","  ### join for tidyverse simplification"
"0","  baseline.join <- full_join(x, working.baseline.final, by = 'Temperature')"
"0","  ### final sample!"
"0","  baseline.sample <- baseline.join %>% mutate(final.dcp = dCp - fit) %>%"
"0","    select(Temperature, final.dcp) %>% rename(dCp = final.dcp)"
"0","  "
"0","  if(plot.on)"
"0","  {"
"0","    ### graph of raw with spline"
"0","    g.spline <- working.sample %>% ggplot(aes(x = Temperature, y = dCp)) + geom_point() + "
"0","      geom_line(data = spline.lower.fit, aes(x = Temperature, y = fit), color = 'red') + "
"0","      geom_line(data = spline.upper.fit, aes(x = Temperature, y = fit), color = 'red') +"
"0","      geom_line(data = spline.connect.fit, aes(x = Temperature, y = fit), color = 'red') +"
"0","      labs(title = 'Raw Curve with Spline Overlay')"
"0","    ### final baseline subtracted sample"
"0","    g.final <- baseline.sample %>% ggplot(aes(x = Temperature, y = dCp)) + geom_point() +"
"0","      labs(title = 'Baseline Subtracted Sample')"
"0","    ### overlaid output"
"0","    print(cowplot::plot_grid(g.final, g.spline, nrow=2))"
"0","  }"
"0",""
"0","  return(baseline.sample)"
"0","}"
